slip..10

1

//C file 

#include<stdio.h>
#include<stdlib.h>
#include "stqueue.h"
int main()
{
	int ch;
	while(1)
	{
		printf("\n----Static Queue----\n");
		printf("\n1.Init\n");
		printf("2.Enqueue\n");
		printf("3.Dequeue\n");
		printf("4.Peek\n");
		printf("5.IsEmpty\n");
		printf("6.IsFull\n");
		printf("7.Exit\n");
		printf("Enter your choice: ");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:init();  break;
			case 2:enque(); break;
			case 3:deque(); break;
			case 4:peek(); break;
			case 5:isempty(); break;
			case 6:isfull(); break;
			case 7:exit(0);
		}//switch
	}//while
}//main()
------------------------------------------------------------------------
//.h file

#include<stdio.h>
#define MAX 3
int a[MAX],front,rear;

void init()
{
	front=-1;
	rear=-1; 
	printf("\nStatic Queue is initialized\n");
}

void enque()
{
	int number;
	if(rear==MAX-1)
		printf("\nQueue is full\n");
	else
	{
		printf("\nEnter the value:");
		scanf("%d",&number);
		front=0;
		rear=rear+1;
		a[rear]=number;	 
		printf("\nValue Enqueued\n");
	}
}

void deque()
{
	if(front==-1 || rear==front-1)
		printf("\nQueue is empty\n");
	else
	{
		printf("\nDeleted value is %d",a[front]);	
		front=front+1;
	}
}

void isfull()
{
	if(rear==MAX-1)
		printf("\nQueue is full\n");
	else
		printf("\nQueue is not full");	
}

void isempty()
{
	if(front==-1 || rear==front-1)
		printf("\nQueue is empty\n");
	else
		printf("\nQueue is not empty");	
}

void peek()
{
	if(front==-1 || rear==front-1)
		printf("\nQueue is empty\n");
	else
		printf("\nValue at front is %d",a[front]);	
}
-------------------------------------------------------------------------------
2.
// bubble sort

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct
{
	char name[30];
	int age;
	int salary;
}RECORD;
RECORD emp[100];

int readFile()
{
	int i=0;
	FILE *fp;
	if((fp=fopen("emp","r"))!=NULL)
	{
		while(! feof(fp))
		{
		      fscanf(fp,"%s%d%d", emp[i].name, &emp[i].age, &emp[i].salary);
			i++;
		}
	}
	return i-1; // number of records read
}

void writeFile(int n)
{
	int i=0;
	FILE *fp;
	if((fp=fopen("sortedname","w"))!=NULL)
	{
		for(i=0;i<n; i++)
		{
			fprintf(fp,"%s %d %d\n", emp[i].name, emp[i].age, emp[i].salary);
		}
	}
}

void display(int n)
{
	int i=0;
	for(i=0;i<n; i++)
	{
		printf("%s\t%d\t%d\n", emp[i].name, emp[i].age, emp[i].salary);
	}
}

void bsort(int n)
{
	int i,j;
	RECORD temp;
	for(i=0;i<n-1;i++)
	{
		for(j=0;j<n-i-1;j++)
		{
			if(strcmp(emp[j].name,emp[j+1].name)>0)
			{
				temp=emp[j];
				emp[j]=emp[j+1];
				emp[j+1]=temp;
			}
		}
	}
}

int main()
{
	int n,i; 
	n=readFile();
	if(n>0)
    	{
	    for(i=0; i<n; i++)
		printf("%s %d %d\n", emp[i].name, emp[i].age, emp[i].salary);
	    bsort(n);
	    writeFile(n);
    	}	
	return 0;
}